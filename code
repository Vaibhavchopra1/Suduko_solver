#include <iostream>

using namespace std;

#define SIZE 9

void display(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++)
            cout << matrix[i][j] << " ";
        cout << endl;
    }
}

bool isSafe(int sudoku[SIZE][SIZE], int row, int col, int num) {
    for (int x = 0; x < SIZE; x++)
        if (sudoku[row][x] == num)
            return false;

    for (int x = 0; x < SIZE; x++)
        if (sudoku[x][col] == num)
            return false;

    int startRow = row - row % 3,
        startCol = col - col % 3;

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (sudoku[i + startRow][j + startCol] == num)
                return false;

    return true;
}

bool solveSudoku(int sudoku[SIZE][SIZE], int row, int col) {
    if (row == SIZE - 1 && col == SIZE)
        return true;

    if (col == SIZE) {
        row++;
        col = 0;
    }

    if (sudoku[row][col] > 0)
        return solveSudoku(sudoku, row, col + 1);

    for (int num = 1; num <= SIZE; num++) {
        if (isSafe(sudoku, row, col, num)) {
            sudoku[row][col] = num;

            if (solveSudoku(sudoku, row, col + 1))
                return true;
        }

        sudoku[row][col] = 0;
    }
    return false;
}

int main() {
    int sudokuGrid[SIZE][SIZE] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                                  {5, 2, 0, 0, 0, 0, 0, 0, 0},
                                  {0, 8, 7, 0, 0, 0, 0, 3, 1},
                                  {0, 0, 3, 0, 1, 0, 0, 8, 0},
                                  {9, 0, 0, 8, 6, 3, 0, 0, 5},
                                  {0, 5, 0, 0, 9, 0, 6, 0, 0},
                                  {1, 3, 0, 0, 0, 0, 2, 5, 0},
                                  {0, 0, 0, 0, 0, 0, 0, 7, 4},
                                  {0, 0, 5, 2, 0, 6, 3, 0, 0}};

    if (solveSudoku(sudokuGrid, 0, 0))
        display(sudokuGrid);
    else
        cout << "No solution exists" << endl;

    return 0;
}
